<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>HTML Video Player</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

   <div class="player">
     <video class="player__video viewer" src="video/652333414.mp4" ></video>
     <!-- the above code can also be like:
     <video class="player__video viewer" src="video/652333414.mp4" autoplay muted></video> -->
     <!-- this way it just have the video autoplay, but i have to add muted after autoplay, otherwise won't autoplay -->

     <div class="player__controls">
       <div class="progress">
        <div class="progress__filled"></div>
       </div>
       <button class="player__button toggle" title="Toggle Play">►</button>
       <input type="range" name="volume" class="player__slider" min="0" max="1" step="0.05" value="1">
       <input type="range" name="playbackRate" class="player__slider" min="0.5" max="2" step="0.1" value="1">
       <button data-skip="-10" class="player__button">« 10s</button>
       <button data-skip="25" class="player__button">25s »</button>
       <button class='full__screen'>⛶</button>
     </div>
   </div>

  <script src="scripts.js"></script>
</body>

<style>

html {
    box-sizing: border-box;
  }
  
  *, *:before, *:after {
    box-sizing: inherit;
  }
  
  body {
    margin: 0;
    padding: 0;
    display: flex;
    background: #7A419B;
    min-height: 100vh;
    background: linear-gradient(135deg, #7c1599 0%,#921099 48%,#7e4ae8 100%);
    background-size: cover;
    align-items: center;
    justify-content: center;
  }
  
  .player {
    max-width: 750px;
    border: 5px solid rgba(0,0,0,0.2);
    box-shadow: 0 0 20px rgba(0,0,0,0.2);
    position: relative;
    font-size: 0;
    overflow: hidden;
  }
  
  /* This css is only applied when fullscreen is active. */
  .player:fullscreen {
    max-width: none;
    width: 100%;
  }
  
  .player:-webkit-full-screen {
    max-width: none;
    width: 100%;
  }
  
  .player__video {
    width: 100%;
  }
  
  .player__button {
    background: none;
    border: 0;
    line-height: 1;
    color: white;
    text-align: center;
    outline: 0;
    padding: 0;
    cursor: pointer;
    max-width: 50px;
  }
  
  .full__screen {
    background: none;
    border: 0;
    line-height: 1;
    color: white;
    text-align: center;
    outline: 0;
    padding: 0;
    cursor: pointer;
    max-width: 50px;
  }
  
  .player__button:focus {
    border-color: #ffc600;
  }
  
  .player__slider {
    width: 10px;
    height: 30px;
  }
  
  .player__controls {
    display: flex;
    position: absolute;
    bottom: 0;
    width: 100%;
    transform: translateY(100%) translateY(-5px);
    transition: all .3s;
    flex-wrap: wrap;
    background: rgba(0,0,0,0.1);
  }
  
  .player:hover .player__controls {
    transform: translateY(0);
  }
  
  .player:hover .progress {
    height: 15px;
  }
  
  .player__controls > * {
    flex: 1;
  }
  
  .progress {
    flex: 10;
    position: relative;
    display: flex;
    flex-basis:100%;
    height: 5px;
    transition: height 0.3s;
    background: rgba(0,0,0,0.5);
    cursor: ew-resize;
  }
  
  .progress__filled {
    width: 50%;
    background: #ffc600;
    flex: 0;
    flex-basis: 50%;
  }
  
  /* unholy css to style input type="range" */
  
  input[type=range] {
    -webkit-appearance: none;
    background: transparent;
    width: 100%;
    margin: 0 5px;
  }
  
  input[type=range]:focus {
    outline: none;
  }
  
  input[type=range]::-webkit-slider-runnable-track {
    width: 100%;
    height: 8.4px;
    cursor: pointer;
    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0 0 1px rgba(13, 13, 13, 0);
    background: rgba(255,255,255,0.8);
    border-radius: 1.3px;
    border: 0.2px solid rgba(1, 1, 1, 0);
  }
  
  input[type=range]::-webkit-slider-thumb {
    height: 15px;
    width: 15px;
    border-radius: 50px;
    background: #ffc600;
    cursor: pointer;
    -webkit-appearance: none;
    margin-top: -3.5px;
    box-shadow:0 0 2px rgba(0,0,0,0.2);
  }
  
  input[type=range]:focus::-webkit-slider-runnable-track {
    background: #bada55;
  }
  
  input[type=range]::-moz-range-track {
    width: 100%;
    height: 8.4px;
    cursor: pointer;
    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0 0 1px rgba(13, 13, 13, 0);
    background: #ffffff;
    border-radius: 1.3px;
    border: 0.2px solid rgba(1, 1, 1, 0);
  }
  
  input[type=range]::-moz-range-thumb {
    box-shadow: 0 0 0 rgba(0, 0, 0, 0), 0 0 0 rgba(13, 13, 13, 0);
    height: 15px;
    width: 15px;
    border-radius: 50px;
    background: #ffc600;
    cursor: pointer;
  }
</style>


<script>
const player = document.querySelector('.player');
const video = player.querySelector('.viewer');
const progress = player.querySelector('.progress')
const progressBar = player.querySelector('.progress__filled')
const toggle = player.querySelector('.toggle')
const skipButtons = player.querySelectorAll('.player__button')
// const skipButtons = player.querySelectorAll('[data-skip]')
const ranges = player.querySelectorAll('.player__slider')
const fullScreen = player.querySelector('.full__screen')


function togglePlay() {
    if (video.paused) {
        video.play()
    } else {
        video.pause()
    }
}
// above code can also be written as:
// function togglePlay() {
//     const method = video.paused ? 'play' : 'pause';
//     video[method]()
// }

function updateButton() {
    toggle.textContent = this.paused ? "►" : "||";
// .textContent is the text part for toggle   this.paused here means video.paused

}

video.addEventListener('click', togglePlay)
toggle.addEventListener('click', togglePlay)
video.addEventListener('play', updateButton)
video.addEventListener('pause', updateButton)

function skip(){
   video.currentTime = video.currentTime + parseFloat(this.dataset.skip)
   // same as  video.currentTime += parseFloat(this.dataset.skip)
   // currentTime here is the current time of the video
   // parseFloat to transfer string to float number
   // this here is skipButtons, and it has dataset and under it has skip which has value of 25 or -10
   // which was defined under data-skip in html. data-skip is customer defined, it can store data to dataset
}

skipButtons.forEach(button => button.addEventListener('click', skip))

function handleSlider(){
video[this.name] = [this.value]
//it is like  video.volumn and video.playbackRate, they are all default items
// this.value is when you slide the bar, the current value
}

ranges.forEach(range => range.addEventListener('change', handleSlider))

function progressUpdate(){
const progressPercentage = (video.currentTime / video.duration) * 100
//video.duration is the total time of the video
progressBar.style.flexBasis = `${progressPercentage}%`
//progressBar.style.flexBasis is one default feature, which can set with a percetage to show how big the bar fill flex is 
}

video.addEventListener('timeupdate', progressUpdate)
// timeupdate here can be 'progress' too, both are for update according the current time

function progressClick(e){
    const timeClicked = (e.offsetX / progress.offsetWidth) * video.duration;
    // here we have to use e.offsetX, we can not use this.offsetX
    // progress.offsetWidth is the total width of the progressbar
    video.currentTime = timeClicked;

}

progress.addEventListener('click', progressClick)
// we don't use progressBar.addEventListener('click', progressClick)

progress.addEventListener('mousedown', progressClick)
// can be like below code too, they are similar as the above code
// let mousedown = false;
// progress.addEventListener('mousedown', () => mousedown = true);
// progress.addEventListener('mouseup', () => mousedown = false);
// progress.addEventListener('mousemove', (e) => mousedown && progressClick(e))

function runfullScreen(){
    video.requestFullscreen() 
}
// .requestFullscreen is the built in function

fullScreen.addEventListener('click', runfullScreen)
</script>

</html>
